variables:
  MIRROR_REPO: git@github.com:thm-projects/arsnova-flashcards.git
  NODE_ENV: production
  BUILD_DIR: build
  BUNDLE_DIR: "$BUILD_DIR/bundle"
  REVIEW_SETTINGS: settings_review.json
  DB_TEST_DUMP: tests/testDatabaseDump/meteor

stages:
  - test
  - build
  - review
  - deploy

jshint:
  stage: test
  tags:
    - nodejs
  dependencies: []
  script:
    - echo "{}" > package.json
    - npm install jshint@^2.9.0
    - node_modules/jshint/bin/jshint --config .jshintrc ./client/head.js ./server/ ./imports/ ./i18n ./tests

jscs:
  stage: test
  tags:
    - nodejs
  dependencies: []
  script:
    - npm install jscs
    - node_modules/jscs/bin/jscs --config .jscsrc ./client/head.js ./server/ ./imports/ ./i18n ./tests

sonar:
  stage: test
  only:
    - master
    - staging
  tags:
    - gradle
  allow_failure: true
  dependencies: []
  script:
    - gradle sonarqube

jsdoc:
  stage: build
  tags:
    - nodejs
  dependencies: []
  script:
    - npm install
    - jsdoc -c documentation/conf.json -t ./node_modules/ink-docstrap/template -d build/jsdoc -r
  artifacts:
    paths:
      - "$BUILD_DIR/jsdoc/"

build:
  stage: build
  tags:
    - meteor
  image: local-nodejs-meteor:8_1.8
  dependencies: []
  script:
    - test -d package-metadata && rm -rf /opt/meteor/package-metadata && mv package-metadata /opt/meteor/
    - npm install
    - meteor build --allow-superuser --server-only --directory "$BUILD_DIR"
    - mv /opt/meteor/package-metadata "$CI_PROJECT_DIR/"
  cache:
    paths:
      - package-metadata
      - .meteor/local
  artifacts:
    paths:
      - "$BUNDLE_DIR"

review:
  stage: review
  script:
    # Extract ID by using all digits in branch name till "-" is found
    - REVIEW_ID=$(echo $CI_BUILD_REF_NAME | cut -f1 -d '-')
    # Set a variable that points to the app directory
    - METEOR_HOME=/srv/review-apps/$REVIEW_ID
    # Make app directory
    - mkdir -p $METEOR_HOME/app
    # Copy meteor settings into app directory
    - cp $REVIEW_SETTINGS $METEOR_HOME/meteor-settings.json
    # Copy the build app (--delete deletes all previous versions of the app)
    - rsync -aqv --delete "$BUNDLE_DIR/"* $METEOR_HOME/app
    # Make directory for mongo db test data dump
    - mkdir -p $METEOR_HOME/app/dbdump
    # Copy mongo db test data
    - rsync -aqv --delete "$DB_TEST_DUMP/"* $METEOR_HOME/dbdump
    # Call script to setup everything
    # First parameter is a unique port, second is used to generate the subdomain and the third points to the dbdump directory
    - /srv/review-apps/review-app-setup.sh $REVIEW_ID $CI_PIPELINE_ID $METEOR_HOME/dbdump
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: http://$CI_PIPELINE_ID.review.arsnova.cards/
    on_stop: stop_review
  only:
    - /^[[:digit:]]+?-/
  except:
    - staging
    - master
  tags:
    - cards-review
  allow_failure: true

stop_review:
  stage: review
  script:
    # Extract ID by using all digits in branch name till "-" is found
    - REVIEW_ID=$(echo $CI_BUILD_REF_NAME | cut -f1 -d '-')
    # Set a variable that points to the app directory
    - METEOR_HOME=/srv/review-apps/$REVIEW_ID
    - cd $METEOR_HOME
    - ./appctl.sh stop
    - cd /srv/review-apps
    - rm -rf $METEOR_HOME
  variables:
    GIT_STRATEGY: none
  when: manual
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  only:
    - /^[[:digit:]]+?-/
  except:
    - staging
    - master
  tags:
    - cards-review
  allow_failure: true

deploy_staging:
  stage: deploy
  when: manual
  tags:
    - rsync
  dependencies:
    - build
    - jsdoc
  script:
    - chmod -R a+rX,ug+w "build"
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$NEW_STAGING_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$NEW_STAGING_SSH_PRIVATE_KEY")
    - rsync -rltgoDqv --delete -e "ssh" "build/bundle/"* "$NEW_STAGING_SSH_URL"
    - rsync -rltgoDqv --delete -e "ssh" "build/jsdoc" "$NEW_STAGING_SSH_URL"
    - ssh $NEW_STAGING_SSH 'touch /home/meteor/deploy.touch'
  environment: staging

deploy_production:
  stage: deploy
  only:
    - master
  tags:
    - rsync
  dependencies:
    - build
  script:
    - chmod -R a+rX,ug+w "build"
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$NEW_PRODUCTION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$NEW_PRODUCTION_SSH_PRIVATE_KEY")
    - rsync -rltgoDqv --delete -e "ssh" "$BUNDLE_DIR/"* "$NEW_PRODUCTION_SSH_URL"
    - ssh $NEW_PRODUCTION_SSH 'touch /home/meteor/deploy.touch'
  environment: production

deploy_linux:
  stage: deploy
  only:
    - master
  tags:
    - rsync
  dependencies:
    - build
  script:
    - chmod -R a+rX,ug+w "build"
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan "$LINUX_URL" >> ~/.ssh/known_hosts
    - ssh-add <(echo "$LINUX_PRIVATE_KEY")
    - rsync -rltgoDqv --delete -e "ssh" "$BUNDLE_DIR/"* "$LINUX_SSH_URL"
    - ssh $LINUX_SSH 'touch /home/meteor/deploy.touch'
  environment: production

# PRODUCTION uses Dockerfile in .docker/kaniko - consumer version!
deploy_dockerhub_production:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$DOCKER_REGISTRY_URL\":{\"auth\":\"$DOCKER_REGISTRY_TOKEN\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context     "$CI_PROJECT_DIR"
      --dockerfile  "$CI_PROJECT_DIR/.docker/kaniko/Dockerfile"
      --build-arg   "BUILD_DIR=$BUILD_DIR"
      --build-arg   "BUNDLE_DIR=$BUNDLE_DIR"
      --destination "$DOCKER_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  only:
    - master
  tags:
    - kaniko
  dependencies:
    - build

deploy_dockerhub_manual:
  stage: deploy
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$DOCKER_REGISTRY_URL\":{\"auth\":\"$DOCKER_REGISTRY_TOKEN\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context     "$CI_PROJECT_DIR"
      --dockerfile  "$CI_PROJECT_DIR/.docker/kaniko/Dockerfile"
      --build-arg   "BUILD_DIR=$BUILD_DIR"
      --build-arg   "BUNDLE_DIR=$BUNDLE_DIR"
      --destination "$DOCKER_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  except:
    - master
  tags:
    - kaniko
  dependencies:
    - build

sync_mirror:
  stage: deploy
  tags:
    - git
  when: always
  allow_failure: true
  dependencies: []
  script:
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$SYNC_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$SYNC_SSH_PRIVATE_KEY")
    - git clone --bare "$CI_REPOSITORY_URL" mirror.git
    - cd mirror.git
    - git push --mirror "$MIRROR_REPO"
  environment: GitHub
