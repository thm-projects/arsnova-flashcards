variables:
  MIRROR_REPO: git@github.com:thm-projects/arsnova-flashcards.git

before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)

staging:
  stage: test
  script:
    - ssh-add <(echo "$STAGING_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh $STAGING_USER@$STAGING_HOST "cd flashcards/; git fetch --all; git reset --hard origin/$CI_BUILD_REF_NAME"
  tags:
    - nodejs

production:
  stage: deploy
  script:
    - ssh-add <(echo "$PRODUCTION_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST 'cd flashcards/; git fetch --all; git reset --hard origin/master'
  only:
    - master
  tags:
    - nodejs
    
before_script:

sonar:
  stage: test
  only:
    - master
    - staging
    - gitlabCI
  tags:
    - gradle
  allow_failure: true
  dependencies: []
  script:
    - gradle sonarqube

build:
  stage: build
  only:
    - master
    - staging
    - gitlabCI
    - /^v[0-9]+/
  tags:
    - meteor
  dependencies: []
  script:
    - test -d package-metadata && rm -rf /opt/meteor/package-metadata && mv package-metadata /opt/meteor/
    - printf "browser\nserver\n" > .meteor/platforms
    - meteor --verbose build --directory --server "$STAGING_HTTP_URL" build
    - mv /opt/meteor/package-metadata "$CI_PROJECT_DIR/"
  cache:
    paths:
      - package-metadata
      - .meteor/local
  artifacts:
    paths:
      - build/bundle/

deploy_staging:
  stage: deploy
  only:
    - gitlabCI
  tags:
    - ssh
  dependencies:
    - build
  script:
    - chmod -R a+rX,ug+w "build"
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$STAGING_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$STAGING_SSH_PRIVATE_KEY")
    - scp -r "build/bundle/"* "$STAGING_SSH_URL"

sync_mirror:
  stage: deploy
  tags:
    - git
  when: always
  allow_failure: true
  dependencies: []
  script:
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh && echo "$SYNC_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - ssh-add <(echo "$SYNC_SSH_PRIVATE_KEY")
    - git clone --bare "$CI_BUILD_REPO" mirror.git
    - cd mirror.git
    - git push --mirror "$MIRROR_REPO"